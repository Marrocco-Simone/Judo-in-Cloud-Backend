swagger: "2.0"
info:
  description: "Applicazione per gestire le partite e i tornei di judo"
  version: "1.0.0"
  title: "judo-in-cloud-be"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "simone.marrocco@studenti.untin.it"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "localhost:2500"
basePath: "/api/v1"
tags:
- name: "Login"
  description: "API referred to login"
- name: "Athlete"
  description: "API referred to athlete"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/athlete_router.ts"
- name: "Age class"
  description: "API referred to age class"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/ageclass_router.ts"
- name: "Match"
  description: "API referred to matches"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/match_router.ts"
- name: "Competition"
  description: "API referred to competitions"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/match_router.ts"
- name: "Tournament"
  description: "API referred to tournaments"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/tournament_router.ts"
schemes:
- "http"
paths:
  /auth:
    post:
      tags:
        - "Login"
      summary: "Login to the application"
      consumes:
        - "application/json"
      produces:
       - "application/json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: "object"
            properties: 
              username:
                type: "string"
              password:
                type: "string"
            example:
              username: username
              password: password
      responses:
        "200":
          description: "Login effettuato"
        "400":
          description: "Username o password errati"
        "500":
          description: "Errore interno del sistema"
        
  /athletes:
    get:
      tags:
        - "Athlete"
      summary: "Retrieving list of athlets"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - Bearer: []
      responses:
        "200":
          description: "Lista degli atleti"
        "500":
          description: "Errore interno del sistema"
    post:
      tags:
        - "Athlete"
      summary: "Add new athlete"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: "object"
            properties: 
              name:
                type: "string"
                example: "Mario"
              surname:
                type: "string"
                example: "Rossi"
              competition:
                type: "string"
                format: "ObjectId"
                example: "629111bd4152f747de72b9ca"
              club:
                type: "string"
                example: "Judo Torino"
              gender:
                type: "string"
                enum:
                  - "M"
                  - "F"
              weight:
                type: integer
                example: 90
              birth_year:
                type: "integer"
                example: 2000
      responses:
        "200":
          description: "Athlete created"
        "500":
          description: "Internal error"
  /athletes/{athlete_id}:
    patch:
      tags:
        - "Athlete"
      summary: "Update an athlete"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the athlete that need to be update"
          required: true
          type: "string"
          format: "ObjectId"
        - in: "body"
          name: "body"
          description: "Paramenters that need to be update. Everyone are NOT required, but at least one must be passed"
          schema:
            type: "object"
            properties: 
              name:
                type: "string"
                example: "Mario"
              surname:
                type: "string"
                example: "Rossi"
              competition:
                type: "string"
                format: "ObjectId"
                example: "629111bd4152f747de72b9ca"
              club:
                type: "string"
                example: "Judo Torino"
              gender:
                type: "string"
                enum:
                  - "M"
                  - "F"
              weight:
                type: integer
                example: 90
              birth_year:
                type: "integer"
                example: 2000

      responses:
        "200":
          description: "Athlete Modified"
        "404":
          description: "Athlete not found"
        "500":
          description: "Internal error"
        
        
        
      

        
  /pet:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /athete/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "authorization"
    in: "header"


definitions:
  Athlete:
    type: "object"
    properties:
      _id:
        type: "string"
        format: "ObjectId"
      name:
        type: "string"
      surname:
        type: "string"
      competition:
        type: "string"
        format: "ObjectId"
      club:
        type: "string"
      gender:
        type: "string"
        enum:
          - "M"
          - "F"
      weight:
        type: "integer"
        format: "int64"
      birth_year:
        type: "integer"
        format: "int64"
      category:
        type: "string"
        format: "ObjectId"
    xml:
      name: "Athlete"
  Age Class:
    type: "object"
    properties: 
      _id:
        type: "string"
        format: "ObjectId"
      max_age:
        type: "integer"
        format: "int64"
      competition:
        type: "string"
        format: "ObjectId"
      name:
        type: "string"
      closed:
        type: "boolean"
        default: false
      params:
        type: "object"
        properties:
          max_age:
            type: "integer"
            format: "int64"
          supplemental_match_time:
            type: "integer"
            format: "int64"
          ippon_to_win:
            type: "integer"
            format: "int64"
          wazaari_to_win:
            type: "integer"
            format: "int64"
          ippon_timer:
            type: "integer"
            format: "int64"
          wazaari_timer:
            type: "integer"
            format: "int64"
    xml:
      name: "Age Class"
  Category:
    type: "object"
    properties: 
      age_class:
        type: "string"
        format: "ObjectId"
      max_weight:
        type: "integer"
        format: "int64"
      gender:
        type: "string"
        enum:
          - "M"
          - "F"
    xml:
      name: "Category"
  Competition:
    type: "object"
    properties: 
      _id:
        type: "string"
        format: "ObjectId"
      name:
        type: "string"
      slug:
        type: "string"
    xml:
      name: "Competition"
  Match:
    type: "object"
    properties: 
      _id?:
        type: "string"
        format: "ObjectId"
      white_athlete:
        type: "string"
        format: "ObjectId"
      red_athlete:
        type: "string"
        format: "ObjectId"
      winner_athlete:
        type: "string"
        format: "ObjectId"
      tournament:
        type: "string"
        format: "ObjectId"
      is_started:
        type: "boolean"
        default: false
      is_over:
        type: "boolean"
        default: false
      match_type:
        type: "integer"
        format: "int64"
      match_scores:
        type: "object"
        properties: 
          final_time:
            type: "integer"
            format: "int64"
          white_ippon:
            type: "integer"
            format: "int64"
          white_wazaari:
            type: "integer"
            format: "int64"
          white_penalties:
            type: "integer"
            format: "int64"
          red_ippon:
            type: "integer"
            format: "int64"
          red_wazaari:
            type: "integer"
            format: "int64"
          red_penalties:
            type: "integer"
            format: "int64" 
    xml:
      name: "Match"         
  Tournament:
    type: "object"
    properties: 
      _id?:
        type: "string"
        format: "ObjectId"
      competition:
        type: "string"
        format: "ObjectId"
      category:
        type: "string"
        format: "ObjectId"
      tatami_number:
        type: "integer"
        format: "int64"
      finished:
        type: "boolean"
        default: "false"
      is_started:
        type: "boolean"
        default: false
      athletes:
        type: "array"
        items: 
          type: "object"
          format: "ObjectId"
      winners_bracket:
        type: "array"
        items: 
          type: "array"
          items: 
            type: "object"
            format: "ObjectId"
      recovered_bracket_1:
        type: "array"
        items: 
          type: "array"
          items: 
            type: "object"
            format: "ObjectId"
      recovered_bracket_2:
        type: "array"
        items: 
          type: "array"
          items: 
            type: "object"
            format: "ObjectId"
    xml:
      name: "Tournament"
  User:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      category:
        type: "object"
        format: "ObjectId"
    xml:
      name: "User"          
        
  





  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  c:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Link to Backend Repository"
  url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend.git"
  