swagger: "2.0"
info:
  description: "Applicazione per gestire le partite e i tornei di judo"
  version: "1.0.0"
  title: "judo-in-cloud-be"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "simone.marrocco@studenti.untin.it"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "localhost:2500"
basePath: "/api/v1"
tags:
- name: "Login"
  description: "API referred to login"
- name: "Athlete"
  description: "API referred to athlete"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/athlete_router.ts"
- name: "Age class"
  description: "API referred to age class"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/ageclass_router.ts"
- name: "Match"
  description: "API referred to matches"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/match_router.ts"
- name: "Competition"
  description: "API referred to competitions"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/match_router.ts"
- name: "Tournament"
  description: "API referred to tournaments"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend/blob/development/src/routers/tournament_router.ts"
schemes:
- "http"
paths:
  # Authorization documentation
  /auth:
    post:
      tags:
        - "Login"
      summary: "Login to the application"
      consumes:
        - "application/json"
      produces:
       - "application/json"
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: "object"
            properties: 
              username:
                type: "string"
              password:
                type: "string"
            example:
              username: username
              password: password
      responses:
        200:
          description: OK
          schema:
            type: object
            properties: 
              status: 
                type: "string"
                example: "success"
              data:
                type: object
                properties: 
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MjljZDY4MjA4ZGU0NGFmOTE0YWEzNDYiLCJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjU0NDQ1NzA0LCJleHAiOjE2NTQ1MzIxMDR9.nT3RO1WrFqPAg3Ts8FugxNJg7yVxccgqsPiNtC6Aa2E
                  user:
                    type: object
                    properties: 
                      _id:
                        type: string
                        format: ObjectId
                        example: "629cd68208de44af914aa346"
                      username:
                        type: string
                        example: admin
                      password:
                        type: string
                        example: $2b$10$MNof/ARrjwSDtgcq/zQNFOsBohpSv7HlWijeDXNlTtUQ/XQaWBnqm
                      competition:
                        type: string
                        format: ObjectId
                        example: 629cd68208de44af914aa343
                      __v:
                        type: number
                        example: 0
        "400":
          description: "Username o password errati"
          schema: 
            type: object
            properties: 
              status: 
                type: "string"
                example: "fail"
              message:
                type: string
                example: "Nome utente o password non validi"
        "500":
          description: "Errore interno del sistema"

  # Athlete documentation  
  /athletes:
    get:
      tags:
        - "Athlete"
      summary: "Retrieving list of athlets"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - Bearer: []
      responses:
        "200":
          description: "Athlete list"
          schema:
            type: array
            items: 
              $ref: '#/definitions/Athlete'
        "500":
          description: "Internal error"
    post:
      tags:
        - "Athlete"
      summary: "Add new athlete"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "body"
          name: "body"
          schema:
            type: "object"
            properties: 
              name:
                type: "string"
                example: "Mario"
              surname:
                type: "string"
                example: "Rossi"
              competition:
                type: "string"
                format: "ObjectId"
                example: "629111bd4152f747de72b9ca"
              club:
                type: "string"
                example: "Judo Torino"
              gender:
                type: "string"
                enum:
                  - "M"
                  - "F"
              weight:
                type: integer
                example: 90
              birth_year:
                type: "integer"
                example: 2000
      responses:
        "200":
          description: "Athlete created"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: success
              data:
                $ref: '#/definitions/Athlete'
        "500":
          description: "Internal error"
  /athletes/{athlete_id}:
    put:
      tags:
        - "Athlete"
      summary: "Update an athlete"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the athlete that need to be update"
          required: true
          type: "string"
          format: "ObjectId"
        - in: "body"
          name: "body"
          description: "Paramenters that need to be update. Everyone are NOT required, but at least one must be passed"
          schema:
            type: "object"
            properties: 
              name:
                type: "string"
                example: "Mario"
              surname:
                type: "string"
                example: "Rossi"
              competition:
                type: "string"
                format: "ObjectId"
                example: "629111bd4152f747de72b9ca"
              club:
                type: "string"
                example: "Judo Torino"
              gender:
                type: "string"
                enum:
                  - "M"
                  - "F"
              weight:
                type: integer
                example: 90
              birth_year:
                type: "integer"
                example: 2000

      responses:
        "200":
          description: "Athlete Modified"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "success"
              data:
                $ref: '#/definitions/Athlete'
        "404":
          description: "Athlete not found"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "fail"
              message:
                type: string
                example: "Athlete not found"

        "500":
          description: "Internal error"
    delete:
      tags:
        - "Athlete"
      summary: "Delete an athlete"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the athlete that need to be delete"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "Athlete deleted"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "success"
              data:
                $ref: '#/definitions/Athlete'
        "404":
          description: "Athlete not found"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "fail"
              message:
                type: string
                example: "Athlete not found"
        "500":
          description: "Internal error"
  /athlete/club:
    get:
      tags:
        - "Athlete"
      summary: "Retrieve all clubs"
      produces:
        - "application/json"
      security:
        - Bearer: []
      responses:
        "200":
          description: "List of all clubs"
          schema:
            type: array
            items: 
              type: string
              example: "Judo Venezia"
              
        "500":
          description: "Internal Error"
  /athlete/club/{club_name}:
    get:
      tags:
        - "Athlete"
      summary: "Get athlets by club name"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "Club Name"
          description: "Name of the club"
          required: true
          type: "string"
      responses:
        "200":
          description: "List of all athlets of a club"
          schema:
            type: object
            properties: 
              status: 
                example: "success"
              data:
                $ref: '#/definitions/Athlete'
        "500":
          description: "Internal Error"

  # Age class documentation
  /age_classes:
    get:
      tags:
        - "Age class"
      summary: "Retrieve age classes and categories"
      produces:
        - "application/json"
      security:
        - Bearer: []
      responses:
        "200":
          description: "List of all age classes and respective categories"
          schema:
            type: object
            properties: 
              status:
                example: "success"
              data:
                type: array
                items: 
                  $ref: '#/definitions/Age Class'
                  
        "500":
          description: "Internal error"
  /age_classes/{ageclass_id}:
    get:
      tags:
        - "Age class"
      summary: "Retrieve data of a given age class"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "ageclass_id"
          description: "ID of the age class for which data is to be obtained"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "Data of the selected age class"
          schema:
            type: object
            properties: 
              status:
                example: "success"
              data:
                $ref: '#/definitions/Age Class'
        "404":
          description: "Age class not found"
          schema:
            type: object
            properties: 
              status:
                example: "fail"
              message:
                example: "Age class not found"
        "500":
          description: "Internal error"
    post:
      tags:
        - "Age class"
      summary: "Modify age class parameters"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "ageclass_id"
          description: "ID of the age class for which data is to be modify"
          required: true
          type: "string"
          format: "ObjectId"
        - in: "body"
          name: "body"
          description: "Parameters to be update. They're NOT required but at least one must be passed"
          schema:
            type: object
            properties: 
              closed:
                type: boolean
                default: true
              params:
                type: object
                properties:
                  match_time: 
                    type: "integer"
                    example: 120
                  supplemental_match_time: 
                    type: "integer"
                    example: 120
                  ippon_to_win: 
                    type: "integer"
                    example: 1
                  wazaari_to_win: 
                    type: "integer"
                    example: 2
                  ippon_timer: 
                    type: "integer"
                    example: 20
                  wazaari_timer: 
                    type: "integer"
                    example: 10
      responses:
        "200":
          description: "Age class modified"
          schema:
            type: object
            properties: 
              status:
                example: "success"
              data:
                type: object
                properties: 
                  params:
                    type: object
                    properties: 
                      match_time:
                        example: 120
                      supplemental_match_time:
                        example: 120
                      ippon_to_win:
                        example:  1
                      wazaari_to_win:
                        example:  2
                      ippon_timer:
                        example:  20
                      wazaari_timer:
                        example:  10
                  _id:
                    example: "6286acd6ead4f64e204a6e06"
                  max_age:
                    example: 15,
                  competition:
                    example: "6286acd6ead4f64e204a6e01"
                  name:
                    example: "Esordienti B"
                  __v:
                    example: 0
                  closed:
                    example: true
        "404":
          description: "Age class not found"
          schema:
            type: object
            properties: 
              status:
                example: "fail"
              message:
                example: "Age Class not found"
        "500":
          description: "Intrnal error"
  /age_classes/reopen/{age_class}:
    get:
      tags:
        - "Age class"
      summary: "If an age class has no started match it can be reopen, else no"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: path
          name: "ageclass_id"
          description: "The ID of the age class of which you want to know if it can be reopened"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "True if the age class can be reopen, false otherwise"
          schema:
            type: object
            properties: 
              status:
                example: "success"
              data:
                type: object
                properties: 
                  can_reopen:
                    example: true
        "400":
          description: "Age class not found"
          schema:
            type: object
            properties: 
              status:
                example: "fail"
              message:
                example: "Age Class not found"
        "500":
          description: "Internal error"
    post:
      tags:
        - "Age class"
      summary: "If the age group is already open, the result is positive"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "ageclass_id"
          description: "The ID of the age class of which you want to reopened"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "Age class reopen"
          schema:
            $ref: '#/definitions/Age Class'
        "400":
          description: "Age class not found"
          schema:
            type: object
            properties: 
              status:
                example: "fail"
              message:
                example: "Age Class not found"
        "500":
          description: "Internal error"
        
  # Match documentation
  /match/{match_id}:
    get:
      tags:
        - "Match"
      summary: "Data about the match passed"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "Match ID"
          description: "ID of the match you want to retrieve data"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "Match Data"
          schema:
            type: object
            properties: 
              status:
                example: "success"
              data:
                $ref: '#/definitions/Match'
        "404":
          description: "Match not found"
          schema:
            type: object
            properties: 
              status:
                example: "fail"
              message:
                example: "Match not found"
        "500":
          description: "Internal error"
    post:
      tags:
        - "Match"
      summary: "Update a given match"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: path
          name: "Match ID"
          description: "ID of the match you want to update"
          required: true
          type: "string"
          format: "ObjectId"
        - in: body
          name: "Parameters"
          description: "Data you want to update"
          required: true
          schema:
            type: "object"
            properties: 
              winner_athlete:
                type: "string"
                format: "ObjectId"
                example: "629285f5d68e8d007ea3d726"
              is_started:
                type: "boolean"
                default: true
                example: true
              is_over:
                type: "boolean"
                default: true
                example: true
              match_scores:
                type: "object"
                properties:
                  final_time:
                    type: "integer"
                    example: 200
                  white_ippon:
                    type: "integer"
                    example: 0
                  white_wazaari:
                    type: "integer"
                    example:  1
                  white_penalties:
                    type: "integer"
                    example:  1
                  red_ippon:
                    type: "integer"
                    example:  1
                  red_wazaari:
                    type: "integer"
                    example:  1
                  red_penalties:
                    type: "integer"
                    example:  2
      responses:
        "200":
          description: "Match updated"
          schema:
            type: object
            properties:
              status: 
                example: "success"
              data:
                type: object
                properties:
                  match_scores:
                    type: object
                    properties:
                      final_time:
                        example: 200
                      white_ippon:
                        example: 0
                      white_wazaari:
                        example: 1
                      white_penalties:
                        example: 1
                      red_ippon:
                        example: 1
                      red_wazaari:
                        example: 1
                      red_penalties:
                        example: 2
                  _id:
                    example: "629cf0df69921e63f81d4a68"
                  is_over:
                    example: false
                  is_started:
                    example: false
                  loser_recovered:
                    example: false
                  match_type:
                    example: 0
                  red_athlete:
                    type: object
                    properties:
                      _id:
                        example: "629cd68208de44af914aa35d"
                      name:
                        example: "Elia"
                      surname:
                        example: "Colombo"
                      competition:
                        example: "629cd68208de44af914aa343"
                      club:
                        example: "Judo Lecce"
                      gender:
                        example: "M"
                      weight:
                        example: 59
                      birth_year:
                        example: 1970
                      category:
                        example: "629cd68208de44af914aa34c"
                      __v:
                        example: 0
                  tournament:
                    example: "629cf0df69921e63f81d4a66"
                  white_athlete:
                    type: object
                    properties: 
                      _id:
                        example: "629285f5d68e8d007ea3d726"
                      name:
                        example: "Kevin"
                      surname:
                        example: "Rossi"
                      competition:
                        example: "629cd68208de44af914aa343"
                      club:
                        example: "Judo Padova"
                      gender:
                        example: "M"
                      weight:
                        example: 59
                      birth_year:
                        example: 1970
                      category:
                        example: "629cd68208de44af914aa34c"
                      __v:
                        example: 0
                  
                  winner_athlete:
                        example: "629285f5d68e8d007ea3d726"
                  params:
                    type: object
                    properties: 
                      match_time:
                        example: 120
                      supplemental_match_time:
                        example: 120
                      ippon_to_win:
                        example: 1
                      wazaari_to_win:
                        example: 2
                      ippon_timer:
                        example: 20
                      wazaari_timer::
                        example: 10
                  category_name:
                    example: "Esordienti B U60 M"
              
        "404":
          description: "Match not found"
          schema:
            type: object
            properties: 
              status:
                example: "fail"
              message:
                example: "Match not found"
        "500":
          description: "Internal error"

  # Competition documentation

  /competition/find/{slug}:
    get:
      tags:
        - "Competition"
      summary: "Retrieve a given competition"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: path
          name: "slug"
          description: "Slug of the competition"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "Competition that you own the indicated slug field"
          schema:
            type: object
            properties: 
              status:
                example: "success"
              data:
                $ref: '#/definitions/Competition'
        "404":
          description: "Competition not found"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "fail"
              message:
                type: string
                example: "Competition not found"


        "500":
          description: "Internal error"
        
  /competition/{tournament_id}/tournaments:
    get:
      tags:
        - "Competition"
      summary: "Get all tournamets of a given competition"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "competition_id"
          description: "ID of the competition"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "List of the competition's tournament"
          schema:
            type: object
            properties: 
              status:
                example: "success"
              data: 
                $ref: '#/definitions/Tournament'
        "400":
          description: "The id passed is not a valid ObjectId"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "fail"
              message:
                type: string
                example: "Id competizione non valido"
        "404":
          description: "Competition not found"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "fail"
              message:
                type: string
                example: "Competition not found"

        "500":
          description: "Internal error"
  
  # Tournament documentation
  /tournament:
    get:
      tags:
        - "Tournament"
      summary: "Retrieve list of tournament"
      produces:
        - "application/json"
      security:
        - Bearer: []
      responses:
        "200":
          description: "List of tournaments"
        "500":
          description: "Internal error"

  /tournament/{tournament_id}:
    get:
      tags:
        - "Tournament"
      summary: "Retrieve data for scoreboard"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "ID of the tournament you want to retrieve data"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "Tournament data"
        "400":
          description: "Tournament not found"
        "500":
          description: "Internal error"

  /tournament/{tournament_id}/next:
    get:
      tags:
        - "Tournament"
      summary: "Retrieve list of matches of a given tournament"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "path"
          name: "ID of the tournament you want to get matches of"
          required: true
          type: "string"
          format: "ObjectId"
      responses:
        "200":
          description: "List of matches of the tournament"
        "400":
          description: "Tournament not found"
        "500":
          description: "Internal error"

  /tournament/reserve/{tournament_id}:
    post:
      tags:
        - "Tournament"
      summary: "Tournament reservation"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: path
          name: "ID of the tournament to reserve"
          required: true
          type: "string"
          format: "ObjectId"
        - in: "body"
          name: "body"
          description: "tatami number to reserve"
          schema:
            type: "object"
            properties: 
              tatami_number:
                type: "integer"
                example: "1"
      responses:
        "200":
          description: "Tournament reserve"
        "404":
          description: "Tournament not found"
        "500":
          description: "Internal error"

securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "authorization"
    in: "header"


definitions:
  Athlete:
    type: "object"
    properties:
      _id:
        type: "string"
        format: "ObjectId"
      name:
        type: "string"
      surname:
        type: "string"
      competition:
        type: "string"
        format: "ObjectId"
      club:
        type: "string"
      gender:
        type: "string"
        enum:
          - "M"
          - "F"
      weight:
        type: "integer"
        format: "int64"
      birth_year:
        type: "integer"
        format: "int64"
      category:
        type: "string"
        format: "ObjectId"
    xml:
      name: "Athlete"
  Age Class:
    type: "object"
    properties: 
      _id:
        type: "string"
        format: "ObjectId"
      max_age:
        type: "integer"
        format: "int64"
      competition:
        type: "string"
        format: "ObjectId"
      name:
        type: "string"
      closed:
        type: "boolean"
        default: false
      params:
        type: "object"
        properties:
          max_age:
            type: "integer"
            format: "int64"
          supplemental_match_time:
            type: "integer"
            format: "int64"
          ippon_to_win:
            type: "integer"
            format: "int64"
          wazaari_to_win:
            type: "integer"
            format: "int64"
          ippon_timer:
            type: "integer"
            format: "int64"
          wazaari_timer:
            type: "integer"
            format: "int64"
    xml:
      name: "Age Class"
  Category:
    type: "object"
    properties: 
      age_class:
        type: "string"
        format: "ObjectId"
      max_weight:
        type: "integer"
        format: "int64"
      gender:
        type: "string"
        enum:
          - "M"
          - "F"
    xml:
      name: "Category"
  Competition:
    type: "object"
    properties: 
      _id:
        type: "string"
        format: "ObjectId"
      name:
        type: "string"
      slug:
        type: "string"
    xml:
      name: "Competition"
  Match:
    type: "object"
    properties: 
      _id?:
        type: "string"
        format: "ObjectId"
      white_athlete:
        type: "string"
        format: "ObjectId"
      red_athlete:
        type: "string"
        format: "ObjectId"
      winner_athlete:
        type: "string"
        format: "ObjectId"
      tournament:
        type: "string"
        format: "ObjectId"
      is_started:
        type: "boolean"
        default: false
      is_over:
        type: "boolean"
        default: false
      match_type:
        type: "integer"
        format: "int64"
      match_scores:
        type: "object"
        properties: 
          final_time:
            type: "integer"
            format: "int64"
          white_ippon:
            type: "integer"
            format: "int64"
          white_wazaari:
            type: "integer"
            format: "int64"
          white_penalties:
            type: "integer"
            format: "int64"
          red_ippon:
            type: "integer"
            format: "int64"
          red_wazaari:
            type: "integer"
            format: "int64"
          red_penalties:
            type: "integer"
            format: "int64" 
    xml:
      name: "Match"         
  Tournament:
    type: "object"
    properties: 
      _id?:
        type: "string"
        format: "ObjectId"
      competition:
        type: "string"
        format: "ObjectId"
      category:
        type: "string"
        format: "ObjectId"
      tatami_number:
        type: "integer"
        format: "int64"
      finished:
        type: "boolean"
        default: "false"
      is_started:
        type: "boolean"
        default: false
      athletes:
        type: "array"
        items: 
          type: "object"
          format: "ObjectId"
      winners_bracket:
        type: "array"
        items: 
          type: "array"
          items: 
            type: "object"
            format: "ObjectId"
      recovered_bracket_1:
        type: "array"
        items: 
          type: "array"
          items: 
            type: "object"
            format: "ObjectId"
      recovered_bracket_2:
        type: "array"
        items: 
          type: "array"
          items: 
            type: "object"
            format: "ObjectId"
    xml:
      name: "Tournament"
  User:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      category:
        type: "object"
        format: "ObjectId"
    xml:
      name: "User"          
externalDocs:
  description: "Link to Backend Repository"
  url: "https://github.com/Marrocco-Simone/Judo-in-Cloud-Backend.git"
  